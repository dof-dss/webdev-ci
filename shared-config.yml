version: 2.1

parameters:
  php_version:
    type: string
    default: "8.3"
  drupal_core_version:
    type: string
    default: "10.4"
  custom_code_dirs:
    type: string
    default: ""
  coding_standards_dirs:
    type: string
    default: ""
  deprecated_code_dirs:
    type: string
    default: ""
  edge_branch:
    type: string
    default: ""
  edge_build_dofdss_packages:
    type: string
    default: ""
  ssh_fingerprint:
    type: string 
    default: ""

jobs:
  build:
    parameters:
      php_version:
        type: string
      ssh_fingerprint:
        type: string
    docker:
      - image: thecodingmachine/php:<< parameters.php_version >>-v4-fpm
        environment:
          PLATFORM_REGION: "uk-1.platform.sh"
          PROJECT_ROOT: "/home/docker/project"
          PHP_EXTENSION_GD: 1
          PHP_INI_MEMORY_LIMIT: 1g
    steps:
      - checkout_code:
          ssh_fingerprint: << parameters.ssh_fingerprint >>
      - composer_tasks
      - persist_to_workspace:
          root: ./
          paths:
            - ./
  build_edge:
    parameters:
      edge_branch:
        type: string
      edge_build_dofdss_packages:
        type: string
      php_version:
        type: string
    docker:
      - image: thecodingmachine/php:<< parameters.php_version >>-v4-fpm
        environment:
          EMAIL: "circleci@localhost"
          GIT_COMMITTER_NAME: "Circle CI"
          GIT_AUTHOR_NAME: "Circle CI"
          EDGE_BUILD_BRANCH: << pipeline.parameters.edge_branch >>
    steps:
      - hosts_keyscan
      - checkout_code
      - install_psh_cli
      - run:
          name: Switch to edge branch
          command: git checkout -b $EDGE_BUILD_BRANCH
      - composer_tasks__edge_packages
      - run:
          name: Re-point dof-dss packages to use latest development code and push.
          command: |
            git add composer.*
            git commit -m "Set dof-dss packages to HEAD development for build"
      - run:
          name: Push changes back to GitHub
          command: |
            git push -f origin $EDGE_BUILD_BRANCH

  sync_data:
    parameters:
      edge_branch:
        type: string
      php_version:
        type: string
    docker:
      - image: thecodingmachine/php:<< parameters.php_version >>-v4-fpm
        environment:
          EMAIL: "circleci@localhost"
          GIT_COMMITTER_NAME: "Circle CI"
          GIT_AUTHOR_NAME: "Circle CI"
          EDGE_BUILD_BRANCH: << pipeline.parameters.edge_branch >>
          PLATFORM_SOLR_HOST: "solr.internal:8080"
    steps:
      - hosts_keyscan
      - checkout_code
      - install_psh_cli
      - run:
          # This task triggers a drush cim from the .platform.app.yaml build/deploy steps.
          # $PLATFORM_PROJECT injected from Cirlce CI env variables and not declared here.
          name: Trigger a data sync from production environment to an edge build.
          command: |
            platform sync data -p $PLATFORM_PROJECT -e $EDGE_BUILD_BRANCH -y

  coding_standards:
    parameters:
      php_version:
        type: string
      coding_standards_dirs:
        type: string
    docker:
      - image: thecodingmachine/php:<< parameters.php_version >>-v4-fpm
        environment:
          PLATFORM_REGION: "uk-1.platform.sh"
          PROJECT_ROOT: "/home/docker/project"
          PHP_EXTENSION_GD: 1
          PHP_INI_MEMORY_LIMIT: 1g
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: PHPCS analysis
          command: ${PROJECT_ROOT}/phpcs.sh ${PROJECT_ROOT} << parameters.coding_standards_dirs >>
  deprecated_code:
    parameters:
      php_version:
        type: string
      deprecated_code_dirs:
        type: string
    docker:
      - image: thecodingmachine/php:<< parameters.php_version >>-v4-fpm
        environment:
          PLATFORM_REGION: "uk-1.platform.sh"
          PROJECT_ROOT: "/home/docker/project"
          PHP_EXTENSION_GD: 1
          PHP_INI_MEMORY_LIMIT: 1g
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Deprecated code check
          command: cd $PROJECT_ROOT && vendor/bin/drupal-check << parameters.deprecated_code_dirs >>
  disallowed_functions:
    parameters:
      php_version:
        type: string
      custom_code_dirs:
        type: string
    docker:
      - image: thecodingmachine/php:<< parameters.php_version >>-v4-fpm
        environment:
          PROJECT_ROOT: "/home/docker/project"
          PHP_INI_MEMORY_LIMIT: 1g
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Check for disallowed function calls
          command: vendor/bin/phpstan analyse << parameters.custom_code_dirs >> -c .circleci/phpstan.neon

commands:
  checkout_code:
    description: "Handle composer access tokens, SSH key fingerprints and code checkout"
    parameters:
      ssh_fingerprint:
        type: string
        default: ""
    steps:
      - add_ssh_keys:
          fingerprints:
            - << parameters.ssh_fingerprint >>
      - checkout

  composer_tasks:
    description: "Validate and install dependencies using composer"
    steps:
      - run:
          name: Validate composer.json and composer.lock file for consistency
          command: composer validate --no-check-all --strict
      - restore_cache:
          keys:
            - composer-vendor-{{ checksum "composer.lock" }}
      - run:
          name: Install dependencies
          command: |
            composer install --no-interaction --optimize-autoloader
      - save_cache:
          key: composer-vendor-{{ checksum "composer.lock" }}
          paths:
            - vendor
            - ~/.composer/cache

  composer_tasks__edge_packages:
    description: "Switch dof-dss packages to HEAD on development branch"
    steps:
      - run:
          name: Switch dof-dss packages to HEAD on dev branches
          command: composer require << pipeline.parameters.edge_build_dofdss_packages >>
    
  install_psh_cli:
    description: "Install the Platform.sh CLI tool"
    steps:
      - run:
          name: Install the Platform.sh CLI tool
          command: curl -sS https://platform.sh/cli/installer | php
      - run:
          name: Add platform cli tool to $PATH
          command: echo 'export PATH="$HOME/"'.platformsh/bin':"$PATH"' >> $BASH_ENV

  hosts_keyscan:
    description: "Keyscan for hosts that require SSH access"
    steps:
      - run:
          name: Keyscan for hosts that require SSH access
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan -H github.com >> ~/.ssh/known_hosts
            ssh-keyscan -H ssh.$PLATFORM_REGION >> ~/.ssh/known_hosts
