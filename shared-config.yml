version: 2.1

parameters:
  php_version:
    type: string
    default: "8.3"
  drupal_core_version:
    type: string
    default: "10.4"
  custom_code_dirs:
    type: string
    default: ""
  coding_standards_dirs:
    type: string
    default: ""
  deprecated_code_dirs:
    type: string
    default: ""
  edge_branch:
    type: string
    default: ""
  edge_build_dofdss_packages:
    type: string
    default: ""
  ignore_dirs:
    type: string
    default: ""
  node_version:
    type: string
    default: ""
  ssh_fingerprint:
    type: string 
    default: ""
  supporting_repo_dependent_packages:
    type: string
    default: ""

jobs:
  build:
    parameters:
      php_version:
        type: string
      ssh_fingerprint:
        type: string
    docker:
      - image: thecodingmachine/php:<< parameters.php_version >>-v4-fpm
        environment:
          PLATFORM_REGION: "uk-1.platform.sh"
          PROJECT_ROOT: "/home/docker/project"
          PHP_EXTENSION_GD: 1
          PHP_INI_MEMORY_LIMIT: 1g
    steps:
      - checkout_code:
          ssh_fingerprint: << parameters.ssh_fingerprint >>
      - composer_tasks
      - persist_to_workspace:
          root: ./
          paths:
            - ./
  build_edge:
    parameters:
      edge_branch:
        type: string
      edge_build_dofdss_packages:
        type: string
      php_version:
        type: string
    docker:
      - image: thecodingmachine/php:<< parameters.php_version >>-v4-fpm
        environment:
          EMAIL: "circleci@localhost"
          GIT_COMMITTER_NAME: "Circle CI"
          GIT_AUTHOR_NAME: "Circle CI"
          EDGE_BUILD_BRANCH: << pipeline.parameters.edge_branch >>
          PHP_EXTENSION_GD: 1
    steps:
      - hosts_keyscan
      - checkout_code
      - install_psh_cli
      - run:
          name: Switch to edge branch
          command: git checkout $EDGE_BUILD_BRANCH
      - composer_tasks__edge_packages
      - run:
          name: Re-point dof-dss packages to use latest development code and push.
          command: |
            git add composer.*
            git commit -m "Set dof-dss packages to HEAD development for build"
      - run:
          name: Push changes back to GitHub
          command: |
            git push -f origin $EDGE_BUILD_BRANCH

  sync_data:
    parameters:
      edge_branch:
        type: string
      php_version:
        type: string
    docker:
      - image: thecodingmachine/php:<< parameters.php_version >>-v4-fpm
        environment:
          EMAIL: "circleci@localhost"
          GIT_COMMITTER_NAME: "Circle CI"
          GIT_AUTHOR_NAME: "Circle CI"
          EDGE_BUILD_BRANCH: << pipeline.parameters.edge_branch >>
          PLATFORM_SOLR_HOST: "solr.internal:8080"
    steps:
      - hosts_keyscan
      - checkout_code
      - install_psh_cli
      - run:
          # This task triggers a drush cim from the .platform.app.yaml build/deploy steps.
          # $PLATFORM_PROJECT injected from Cirlce CI env variables and not declared here.
          name: Trigger a data sync from production environment to an edge build.
          command: |
            platform sync data -p $PLATFORM_PROJECT -e $EDGE_BUILD_BRANCH -y
      - run:
          name: Set GAC state variable (if present)
          command: |
            if [ -n "$GAC_ACCESS_TOKEN" ]; then
              platform environment:drush "sset google_analytics_counter.access_token ${GAC_ACCESS_TOKEN}" \
                -p $PLATFORM_PROJECT -e $EDGE_BUILD_BRANCH
            fi
          when: always
      - run:
          name: Reset QA account passwords
          command: |
            platform environment:drush password_qa_accounts -e $EDGE_BUILD_BRANCH

  coding_standards:
    parameters:
      php_version:
        type: string
      coding_standards_dirs:
        type: string
      ignore_dirs:
        type: string
    docker:
      - image: thecodingmachine/php:<< parameters.php_version >>-v4-fpm
        environment:
          PLATFORM_REGION: "uk-1.platform.sh"
          PROJECT_ROOT: "/home/docker/project"
          PHP_EXTENSION_GD: 1
          PHP_INI_MEMORY_LIMIT: 1g
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: PHPCS analysis
          command: ${PROJECT_ROOT}/phpcs.sh "${PROJECT_ROOT}" "<< parameters.coding_standards_dirs >>" "<< parameters.ignore_dirs >>"
  deprecated_code:
    parameters:
      php_version:
        type: string
      deprecated_code_dirs:
        type: string
    docker:
      - image: thecodingmachine/php:<< parameters.php_version >>-v4-fpm
        environment:
          PLATFORM_REGION: "uk-1.platform.sh"
          PROJECT_ROOT: "/home/docker/project"
          PHP_EXTENSION_GD: 1
          PHP_INI_MEMORY_LIMIT: 1g
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Deprecated code check
          command: cd $PROJECT_ROOT && vendor/bin/drupal-check << parameters.deprecated_code_dirs >>
  disallowed_functions:
    parameters:
      php_version:
        type: string
      custom_code_dirs:
        type: string
    docker:
      - image: thecodingmachine/php:<< parameters.php_version >>-v4-fpm
        environment:
          PROJECT_ROOT: "/home/docker/project"
          PHP_INI_MEMORY_LIMIT: 1g
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Check for disallowed function calls
          command: vendor/bin/phpstan analyse << parameters.custom_code_dirs >> -c .circleci/phpstan.neon
  # SUPPORTING REPO jobs: used because Circle CI can't make things like attach_workspace
  # and checkout conditional so these are replicas of related jobs with minor functional adjustments.
  supporting_repo_coding_standards:
    parameters:
      php_version:
        type: string
    docker:
      - image: thecodingmachine/php:<< parameters.php_version >>-v4-fpm
        environment:
          PLATFORM_REGION: "uk-1.platform.sh"
          PROJECT_ROOT: "/home/docker/project"
          PHP_EXTENSION_GD: 1
          PHP_INI_MEMORY_LIMIT: 1g
    steps:
      - checkout
      - run:
          name: Fetch phpcs and dependencies
          command: |
            composer require drupal/coder --prefer-stable --no-interaction --optimize-autoloader
            # Move vendor and core directories up a level, out of the way, as we don't want to code-check all of that.
            if [ -d vendor ]; then
              mv vendor ../
            fi

            if [ -d core ]; then
              mv core ../
            fi
      - run:
          name: Fetch phpcs convenience script
          command: |
            curl https://raw.githubusercontent.com/dof-dss/nidirect-drupal/main/phpcs.sh -o $PROJECT_ROOT/phpcs.sh
            chmod +x $PROJECT_ROOT/phpcs.sh
      - run:
          name: PHPCS analysis
          command: $PROJECT_ROOT/phpcs.sh ~/ "${PROJECT_ROOT}"
  supporting_repo_deprecated_code:
    parameters:
      custom_code_dirs:
        type: string
      drupal_core_version:
        type: string
      php_version:
        type: string
      supporting_repo_dependent_packages:
        type: string
    docker:
      - image: thecodingmachine/php:<< parameters.php_version >>-v4-fpm
        environment:
          PLATFORM_REGION: "uk-1.platform.sh"
          PROJECT_ROOT: "/home/docker/project"
          PHP_EXTENSION_GD: 1
          PHP_INI_MEMORY_LIMIT: 1g
    steps:
      - checkout:
          path: ~/dofdss
      - run:
          name: Fetch Drupal core
          command: |
            cd $PROJECT_ROOT
            composer create-project drupal/recommended-project:<< parameters.drupal_core_version >>.x-dev $PROJECT_ROOT --no-interaction
      - run:
          name: Download dependent contrib modules.
          command: |
            cd $PROJECT_ROOT
            composer require << parameters.supporting_repo_dependent_packages >>
      - run:
          name: Move custom code into position
          command: mv ~/dofdss << parameters.custom_code_dirs >>
      - run:
          name: Deprecated code check
          command: |
            cd $PROJECT_ROOT/web
            ../vendor/bin/drupal-check << parameters.custom_code_dirs >>
  supporting_repo_disallowed_functions:
    parameters:
      custom_code_dirs:
        type: string
      drupal_core_version:
        type: string
      php_version:
        type: string
    docker:
      - image: thecodingmachine/php:<< parameters.php_version >>-v4-fpm
        environment:
          PLATFORM_REGION: "uk-1.platform.sh"
          PROJECT_ROOT: "/home/docker/project"
          PHP_EXTENSION_GD: 1
          PHP_INI_MEMORY_LIMIT: 1g
    steps:
      - checkout
      - run: mv ~/project /home/docker/custom_code
      - run: cp -R /home/docker/custom_code/.circleci/phpstan.neon ~/
      - run:
          name: Fetch latest Drupal core and other misc composer tools.
          command: |
            cd $PROJECT_ROOT
            composer create-project drupal/recommended-project:<< parameters.drupal_core_version >>.x-dev $PROJECT_ROOT --no-interaction
            composer require --dev phpstan/extension-installer spaze/phpstan-disallowed-calls
      - run:
          name: Move custom code into position
          command: mv /home/docker/custom_code << parameters.custom_code_dirs >>
      - run:
          name: Check for disallowed function calls
          command: |
            vendor/bin/phpstan analyse << parameters.custom_code_dirs >> -c ~/phpstan.neon
  # UNITY check for differences in upstream Drupal profile.
  check_illegal_updates:
    parameters:
      php_version:
        type: string
    docker:
      - image: thecodingmachine/php:<< parameters.php_version >>-v4-fpm
    steps:
      - attach_workspace:
          at: ./
      - hosts_keyscan
      - run:
          name: Check for updates made directly in this repo rather than in maestro-drupal-unity
          command: |
            git clone git@github.com:dof-dss/maestro-drupal-unity.git
            echo "** Any failures in this section indicate that updates have been made directly in this repo "
            echo "when they should have been made in https://github.com/dof-dss/maestro-drupal-unity and"
            echo "pulled from the upstream repo using 'maestro pub' **"
            echo "** checking composer.json  **"
            diff maestro-drupal-unity/composer.json composer.json
            echo "** checking composer.lock  **"
            diff maestro-drupal-unity/composer.lock composer.lock
            echo "** checking circleci/config.yml  **"
            #diff maestro-drupal-unity/.circleci/config.yml .circleci/config.yml
            echo "** checking platform.app.yaml **"
            grep 'will be overwritten' .platform.app.yaml
            echo "** checking site.settings.php  **"
            diff maestro-drupal-unity/web/sites/site.settings.php web/sites/site.settings.php
            echo "** checking sites.php  **"
            diff maestro-drupal-unity/web/sites/sites.php web/sites/sites.php
  # Checks to ensure that Unity Base has not been polluted with project files.
  unity_base_checks:
    parameters:
      php_version:
        type: string
    docker:
      - image: thecodingmachine/php:<< parameters.php_version >>-v4-fpm
    steps:
      - attach_workspace:
          at: ./
      - when:
          condition:
            equal: [ "https://github.com/dof-dss/unity_base", << pipeline.project.git_url >> ]
          steps:
            - run:
                name: Check Project directory and files do not exist
                command: |
                  cd $PROJECT_ROOT
                  .circleci/unity_base_guardian.sh

  # UNITY Nightly edge build
  unity_edge_build:
    parameters:
      php_version:
        type: string
      node_version:
        type: string
      edge_branch:
        type: string
      edge_build_dofdss_packages:
        type: string
    docker:
      - image: thecodingmachine/php:<< parameters.php_version >>-v4-fpm
        environment:
          PLATFORM_REGION: "uk-1.platform.sh"
          PROJECT_ROOT: "/home/docker/project"
          PHP_EXTENSION_GD: 1
          PHP_EXTENSIONS: "gd"
          PHP_INI_MEMORY_LIMIT: -1
          PHP_INI_MAX_EXECUTION_TIME: 600
          PHP_INI_MAX_INPUT_TIME: 600
          # git variables to avoid empty committer identity errors
          EMAIL: "circleci@localhost"
          GIT_COMMITTER_NAME: "Circle CI"
          GIT_AUTHOR_NAME: "Circle CI"
          EDGE_BUILD_BRANCH: << parameters.edge_branch >>
          CPPFLAGS: "-DPNG_ARM_NEON_OPT=0"
          NODE_VERSION: << parameters.node_version >>
    steps:
      - hosts_keyscan
      - checkout_code
      - run:
          name: Add OS and PHP extensions
          command: |
            touch ~/.bashrc
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
            sudo apt update --allow-releaseinfo-change
            sudo apt install libjpeg-dev make python3 g++ dh-autoreconf -y
      - install_psh_cli
      - run:
          name: Switch to edge branch
          command: git checkout -b $EDGE_BUILD_BRANCH
      - composer_tasks__edge_packages
      - run:
          name: Push composer package updates back to GitHub
          command: |
            git add composer.*
            git commit -m "Set dof-dss packages to HEAD development for build"
      - run:
          name: Rebuild site themes
          command: |
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
            cd $PROJECT_ROOT
            ./build-themes.sh --sites-dir $PROJECT_ROOT/project/sites
            # Push to fixed, non-integrating build branch. GitHub webhook integration will propagate this
            # to platform.sh for later steps to use.
            cd $PROJECT_ROOT
            git add *.css
            git commit -m "Theme rebuild"
            git push -f origin $EDGE_BUILD_BRANCH
  # Separate task to allow us to sync data on PSH environments, without pauses in other jobs.
  unity_sync_data:
    parameters:
      php_version:
        type: string
      edge_branch:
        type: string
    docker:
      - image: thecodingmachine/php:<< parameters.php_version >>-v4-fpm
        environment:
          PLATFORM_REGION: "uk-1.platform.sh"
          PROJECT_ROOT: "/home/docker/project"
          PHP_EXTENSION_GD: 1
          PHP_EXTENSIONS: "gd"
          PHP_INI_MEMORY_LIMIT: -1
          PHP_INI_MAX_EXECUTION_TIME: 600
          PHP_INI_MAX_INPUT_TIME: 600
          EDGE_BUILD_BRANCH: << parameters.edge_branch >>
    steps:
      - checkout_code
      - install_psh_cli
      - run:
          name: Trigger a data sync from master environment to nightly edge build.
          command: |
            platform sync data -p $PLATFORM_PROJECT -e $EDGE_BUILD_BRANCH -y
          no_output_timeout: 20m
      - run:
          name: Backup data sync if the previous attempt failed.
          command: |
            # Pause for the blocking activity to finish.
            sleep 300s
            platform sync data -p $PLATFORM_PROJECT -e $EDGE_BUILD_BRANCH -y
          when: on_fail
          no_output_timeout: 30m
      - run:
          name: Run any outstanding updates
          command: |
            for site in `ls -l ~/project/project/sites | grep ^d | awk '!/default/{print $9}'`
            do
              result=$(platform drush "st -l ${site}" -y -p $PLATFORM_PROJECT -e $EDGE_BUILD_BRANCH | (grep "Drupal bootstrap : Successful" || true) )
              if [[ -n $result ]]; then
                result2=$(platform drush "updb -l ${site} -y" -p $PLATFORM_PROJECT -e $EDGE_BUILD_BRANCH | (grep "Fastly (fastly)" || true) )
            fi
            done
          no_output_timeout: 20m
      - run:
          name: Turn off fastly module to allow for cleaner config import
          command: |
            for site in `ls -l ~/project/project/sites | grep ^d | awk '!/default/{print $9}'`
            do
              result=$(platform drush "st -l ${site}" -y -p $PLATFORM_PROJECT -e $EDGE_BUILD_BRANCH | (grep "Drupal bootstrap : Successful" || true) )
              if [[ -n $result ]]; then
                result2=$(platform drush "pml --status=enabled -l ${site}" -p $PLATFORM_PROJECT -e $EDGE_BUILD_BRANCH | (grep "Fastly (fastly)" || true) )
                if [[ -n $result2 ]]; then
                  echo "***** Uninstall Fastly - ${site} *****"
                  platform drush "pmu fastly -l ${site}" -y -p $PLATFORM_PROJECT -e $EDGE_BUILD_BRANCH
                fi
            fi
            done
      - run:
          name: Clear cache before config import
          command: |
            for site in `ls -l ~/project/project/sites | grep ^d | awk '!/default/{print $9}'`
            do
              result=$(platform drush "st -l ${site}" -y -p $PLATFORM_PROJECT -e $EDGE_BUILD_BRANCH | (grep "Drupal bootstrap : Successful" || true) )
              if [[ -n $result ]]; then
                echo "***** Clear Cache - ${site} *****"
                platform drush "cr -l ${site}" -y -p $PLATFORM_PROJECT -e $EDGE_BUILD_BRANCH
              fi
            done
      - run:
          name: Refresh configuration as our db will contain active prod config after sync operation
          command: |
            for site in `ls -l ~/project/project/sites | grep ^d | awk '!/default/{print $9}'`
            do
              result=$(platform drush "st -l ${site}" -y -p $PLATFORM_PROJECT -e $EDGE_BUILD_BRANCH | (grep "Drupal bootstrap : Successful" || true) )
              if [[ -n $result ]]; then
                echo "***** Config Import - ${site} *****"
                platform drush "cim -l ${site}" -y -p $PLATFORM_PROJECT -e $EDGE_BUILD_BRANCH
                echo "***** Import blocks/taxonomies/menus - ${site} *****"
                platform drush "import-all-if-installed safe -l ${site}" -y -p $PLATFORM_PROJECT -e $EDGE_BUILD_BRANCH
                echo "***** Enable QA accounts - ${site} *****"
                platform drush "bulk_update_qa_accounts enable -l ${site}" -y -p $PLATFORM_PROJECT -e $EDGE_BUILD_BRANCH
              fi
            done

  # THEMING repo jobs.
  theme_install:
    parameters:
      php_version:
        type: string
      node_version:
        type: string
    docker:
      - image: thecodingmachine/php:<< parameters.php_version >>-v4-fpm-node<< parameters.node_version >>
        environment:
          CPPFLAGS: "-DPNG_ARM_NEON_OPT=0"
    steps:
      - checkout
      - restore_cache:
          key: node_modules-{{ .Branch }}-{{ checksum "package.json" }}
      - run:
          name: Fetch dependencies
          command: npm install
      - save_cache:
          key: node_modules-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - node_modules
      - persist_to_workspace:
          root: ./
          paths:
            - ./
  theme_lint:
    parameters:
      php_version:
        type: string
      node_version:
        type: string
    docker:
      - image: thecodingmachine/php:<< parameters.php_version >>-v4-fpm-node<< parameters.node_version >>
        environment:
          CPPFLAGS: "-DPNG_ARM_NEON_OPT=0"
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Lint all frontend code
          command: |
            npm run lint
  theme_build_assets:
    parameters:
      php_version:
        type: string
      node_version:
        type: string
    docker:
      - image: thecodingmachine/php:<< parameters.php_version >>-v4-fpm-node<< parameters.node_version >>
        environment:
          CPPFLAGS: "-DPNG_ARM_NEON_OPT=0"
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Build theme assets
          command: npm run build
commands:
  checkout_code:
    description: "Handle composer access tokens, SSH key fingerprints and code checkout"
    parameters:
      ssh_fingerprint:
        type: string
        default: ""
    steps:
      - add_ssh_keys:
          fingerprints:
            - << parameters.ssh_fingerprint >>
      - checkout

  composer_tasks:
    description: "Validate and install dependencies using composer"
    steps:
      - run:
          name: Validate composer.json and composer.lock file for consistency
          command: composer validate --no-check-all --strict
      - restore_cache:
          keys:
            - composer-vendor-{{ checksum "composer.lock" }}
      - run:
          name: Install dependencies
          command: |
            composer install --no-interaction --optimize-autoloader
      - save_cache:
          key: composer-vendor-{{ checksum "composer.lock" }}
          paths:
            - vendor
            - ~/.composer/cache

  composer_tasks__edge_packages:
    description: "Switch dof-dss packages to HEAD on development branch"
    steps:
      - run:
          name: Switch dof-dss packages to HEAD on dev branches
          command: composer require << pipeline.parameters.edge_build_dofdss_packages >>
    
  install_psh_cli:
    description: "Install the Platform.sh CLI tool"
    steps:
      - run:
          name: Install the Platform.sh CLI tool
          command: curl -sS https://platform.sh/cli/installer | php
      - run:
          name: Add platform cli tool to $PATH
          command: echo 'export PATH="$HOME/"'.platformsh/bin':"$PATH"' >> $BASH_ENV

  hosts_keyscan:
    description: "Keyscan for hosts that require SSH access"
    steps:
      - run:
          name: Keyscan for hosts that require SSH access
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan -H github.com >> ~/.ssh/known_hosts
            ssh-keyscan -H ssh.$PLATFORM_REGION >> ~/.ssh/known_hosts
